<?php

namespace DealsBundle\Repository;

use DealsBundle\Services\Constantes;
use Doctrine\ORM\EntityRepository;

/**
 * DealRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DealRepository extends EntityRepository
{
    /**
     * @param $typeSearch
     * @return array|int|mixed|string
     */
    public function findDealsBySearch($typeSearch)
    {
        switch ($typeSearch){
            case "new":
                $deals = $this->getLastDeals(Constantes::DEAL_NB_DEFAULT);
                break;
            case "hot":
                $deals = $this->getHotestDeals(Constantes::DEAL_NB_DEFAULT);
                break;
            default:
                $deals = $this->findBy(array(), array('titre' => 'ASC'), Constantes::DEAL_NB_DEFAULT);
                break;
        }

        return $deals;
    }

    /**
     * @return int|mixed|string
     */
    public function getLastDeals($limit)
    {
        return $this->createQueryBuilder('d')
            ->addOrderBy('d.datePublication', 'DESC')
            ->setMaxResults($limit)
            ->getQuery()
            ->execute();
    }

    /**
     * @return int|mixed|string
     */
    public function getHotestDeals($limit)
    {
       return $this->createQueryBuilder('d')
           ->andWhere('d.dateExpiration > CURRENT_DATE()')
           ->orderBy('d.dateExpiration','ASC')
           ->setMaxResults($limit)
           ->getQuery()
           ->execute();
    }

    /**
     * @param $nbDeal
     * @param $position
     * @param $typeSearch
     */
    public function findScrollDeals($nbDeal,$position,$typeSearch)
    {
        $query = $this ->createQueryBuilder('d')
                        ->setFirstResult($position + 1)
                        ->setMaxResults($nbDeal);
        if($typeSearch == 'hot'){
            $query = $query
                ->andWhere('d.dateExpiration > CURRENT_DATE()')
                ->orderBy('d.dateExpiration','ASC');
        }if($typeSearch == 'new'){
            $query = $query
                ->addOrderBy('d.datePublication', 'DESC');
        }if($typeSearch == ''){
            $query = $query
                ->addOrderBy('d.titre', 'ASC');
        }

        return $query->getQuery()->getResult();
    }

    /**
     * @param $user
     * @return array|int|string
     */
    public function findDealsByUser($user)
    {
        $query = $this->createQueryBuilder('d')
            ->leftJoin('d.user', 'u')
            ->where('u.id=:userid')
            ->setParameter('userid', $user->getId())
            ->addOrderBy('d.dateExpiration','DESC')
            ->getQuery()
            ->getResult();
        return $query;
    }

    /**
     * @param $search
     * @return array|int|string
     */
    public function findSearch($search)
    {
        $query = $this
            ->createQueryBuilder('d');
        if(!empty($search["q"])){
            $query = $query
                ->andWhere("d.localisation LIKE '%".$search["q"]."%' OR d.titre LIKE '%".$search["q"]."%' OR d.prixPromo LIKE '%".$search["q"]."%'")
                ->addOrderBy('d.titre','ASC')
                ->setMaxResults(8);
            }
        if (!empty($search["categorie"])) {
            $query = $query
                ->andWhere('d.categorie = :categorie')
                ->setParameter('categorie', $search["categorie"]);
        }
        return $query->getQuery()->getResult();
    }
}
